"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/framesync@6.0.1";
exports.ids = ["vendor-chunks/framesync@6.0.1"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/framesync@6.0.1/node_modules/framesync/dist/framesync.cjs.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/framesync@6.0.1/node_modules/framesync/dist/framesync.cjs.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst defaultTimestep = 1 / 60 * 1000;\nconst getCurrentTime = typeof performance !== \"undefined\" ? ()=>performance.now() : ()=>Date.now();\nconst onNextFrame =  false ? 0 : (callback)=>setTimeout(()=>callback(getCurrentTime()), defaultTimestep);\nfunction createRenderStep(runNextFrame) {\n    let toRun = [];\n    let toRunNextFrame = [];\n    let numToRun = 0;\n    let isProcessing = false;\n    let flushNextFrame = false;\n    const toKeepAlive = new WeakSet();\n    const step = {\n        schedule: (callback, keepAlive = false, immediate = false)=>{\n            const addToCurrentFrame = immediate && isProcessing;\n            const buffer = addToCurrentFrame ? toRun : toRunNextFrame;\n            if (keepAlive) toKeepAlive.add(callback);\n            if (buffer.indexOf(callback) === -1) {\n                buffer.push(callback);\n                if (addToCurrentFrame && isProcessing) numToRun = toRun.length;\n            }\n            return callback;\n        },\n        cancel: (callback)=>{\n            const index = toRunNextFrame.indexOf(callback);\n            if (index !== -1) toRunNextFrame.splice(index, 1);\n            toKeepAlive.delete(callback);\n        },\n        process: (frameData)=>{\n            if (isProcessing) {\n                flushNextFrame = true;\n                return;\n            }\n            isProcessing = true;\n            [toRun, toRunNextFrame] = [\n                toRunNextFrame,\n                toRun\n            ];\n            toRunNextFrame.length = 0;\n            numToRun = toRun.length;\n            if (numToRun) {\n                for(let i = 0; i < numToRun; i++){\n                    const callback = toRun[i];\n                    callback(frameData);\n                    if (toKeepAlive.has(callback)) {\n                        step.schedule(callback);\n                        runNextFrame();\n                    }\n                }\n            }\n            isProcessing = false;\n            if (flushNextFrame) {\n                flushNextFrame = false;\n                step.process(frameData);\n            }\n        }\n    };\n    return step;\n}\nconst maxElapsed = 40;\nlet useDefaultElapsed = true;\nlet runNextFrame = false;\nlet isProcessing = false;\nconst frame = {\n    delta: 0,\n    timestamp: 0\n};\nconst stepsOrder = [\n    \"read\",\n    \"update\",\n    \"preRender\",\n    \"render\",\n    \"postRender\"\n];\nconst steps = stepsOrder.reduce((acc, key)=>{\n    acc[key] = createRenderStep(()=>runNextFrame = true);\n    return acc;\n}, {});\nconst sync = stepsOrder.reduce((acc, key)=>{\n    const step = steps[key];\n    acc[key] = (process, keepAlive = false, immediate = false)=>{\n        if (!runNextFrame) startLoop();\n        return step.schedule(process, keepAlive, immediate);\n    };\n    return acc;\n}, {});\nconst cancelSync = stepsOrder.reduce((acc, key)=>{\n    acc[key] = steps[key].cancel;\n    return acc;\n}, {});\nconst flushSync = stepsOrder.reduce((acc, key)=>{\n    acc[key] = ()=>steps[key].process(frame);\n    return acc;\n}, {});\nconst processStep = (stepId)=>steps[stepId].process(frame);\nconst processFrame = (timestamp)=>{\n    runNextFrame = false;\n    frame.delta = useDefaultElapsed ? defaultTimestep : Math.max(Math.min(timestamp - frame.timestamp, maxElapsed), 1);\n    frame.timestamp = timestamp;\n    isProcessing = true;\n    stepsOrder.forEach(processStep);\n    isProcessing = false;\n    if (runNextFrame) {\n        useDefaultElapsed = false;\n        onNextFrame(processFrame);\n    }\n};\nconst startLoop = ()=>{\n    runNextFrame = true;\n    useDefaultElapsed = true;\n    if (!isProcessing) onNextFrame(processFrame);\n};\nconst getFrameData = ()=>frame;\nexports.cancelSync = cancelSync;\nexports[\"default\"] = sync;\nexports.flushSync = flushSync;\nexports.getFrameData = getFrameData;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZnJhbWVzeW5jQDYuMC4xL25vZGVfbW9kdWxlcy9mcmFtZXN5bmMvZGlzdC9mcmFtZXN5bmMuY2pzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLGtCQUFrQixJQUFLLEtBQU07QUFDbkMsTUFBTUMsaUJBQWlCLE9BQU9DLGdCQUFnQixjQUN4QyxJQUFNQSxZQUFZQyxHQUFHLEtBQ3JCLElBQU1DLEtBQUtELEdBQUc7QUFDcEIsTUFBTUUsY0FBYyxNQUE2QixHQUMzQyxDQUFvREMsR0FDcEQsQ0FBQ0EsV0FBYUcsV0FBVyxJQUFNSCxTQUFTTCxtQkFBbUJEO0FBRWpFLFNBQVNVLGlCQUFpQkMsWUFBWTtJQUNsQyxJQUFJQyxRQUFRLEVBQUU7SUFDZCxJQUFJQyxpQkFBaUIsRUFBRTtJQUN2QixJQUFJQyxXQUFXO0lBQ2YsSUFBSUMsZUFBZTtJQUNuQixJQUFJQyxpQkFBaUI7SUFDckIsTUFBTUMsY0FBYyxJQUFJQztJQUN4QixNQUFNQyxPQUFPO1FBQ1RDLFVBQVUsQ0FBQ2QsVUFBVWUsWUFBWSxLQUFLLEVBQUVDLFlBQVksS0FBSztZQUNyRCxNQUFNQyxvQkFBb0JELGFBQWFQO1lBQ3ZDLE1BQU1TLFNBQVNELG9CQUFvQlgsUUFBUUM7WUFDM0MsSUFBSVEsV0FDQUosWUFBWVEsR0FBRyxDQUFDbkI7WUFDcEIsSUFBSWtCLE9BQU9FLE9BQU8sQ0FBQ3BCLGNBQWMsQ0FBQyxHQUFHO2dCQUNqQ2tCLE9BQU9HLElBQUksQ0FBQ3JCO2dCQUNaLElBQUlpQixxQkFBcUJSLGNBQ3JCRCxXQUFXRixNQUFNZ0IsTUFBTTtZQUMvQjtZQUNBLE9BQU90QjtRQUNYO1FBQ0F1QixRQUFRLENBQUN2QjtZQUNMLE1BQU13QixRQUFRakIsZUFBZWEsT0FBTyxDQUFDcEI7WUFDckMsSUFBSXdCLFVBQVUsQ0FBQyxHQUNYakIsZUFBZWtCLE1BQU0sQ0FB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QUdvRDtBQUNwQnBELG9CQUFvQixHQUFHNEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hYXN0aGEtbmV4dC8uL25vZGVfbW9kdWxlcy8ucG5wbS9mcmFtZXN5bmNANi4wLjEvbm9kZV9tb2R1bGVzL2ZyYW1lc3luYy9kaXN0L2ZyYW1lc3luYy5janMuanM/YzdiYiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGRlZmF1bHRUaW1lc3RlcCA9ICgxIC8gNjApICogMTAwMDtcbmNvbnN0IGdldEN1cnJlbnRUaW1lID0gdHlwZW9mIHBlcmZvcm1hbmNlICE9PSBcInVuZGVmaW5lZFwiXG4gICAgPyAoKSA9PiBwZXJmb3JtYW5jZS5ub3coKVxuICAgIDogKCkgPT4gRGF0ZS5ub3coKTtcbmNvbnN0IG9uTmV4dEZyYW1lID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIlxuICAgID8gKGNhbGxiYWNrKSA9PiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNhbGxiYWNrKVxuICAgIDogKGNhbGxiYWNrKSA9PiBzZXRUaW1lb3V0KCgpID0+IGNhbGxiYWNrKGdldEN1cnJlbnRUaW1lKCkpLCBkZWZhdWx0VGltZXN0ZXApO1xuXG5mdW5jdGlvbiBjcmVhdGVSZW5kZXJTdGVwKHJ1bk5leHRGcmFtZSkge1xuICAgIGxldCB0b1J1biA9IFtdO1xuICAgIGxldCB0b1J1bk5leHRGcmFtZSA9IFtdO1xuICAgIGxldCBudW1Ub1J1biA9IDA7XG4gICAgbGV0IGlzUHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgIGxldCBmbHVzaE5leHRGcmFtZSA9IGZhbHNlO1xuICAgIGNvbnN0IHRvS2VlcEFsaXZlID0gbmV3IFdlYWtTZXQoKTtcbiAgICBjb25zdCBzdGVwID0ge1xuICAgICAgICBzY2hlZHVsZTogKGNhbGxiYWNrLCBrZWVwQWxpdmUgPSBmYWxzZSwgaW1tZWRpYXRlID0gZmFsc2UpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFkZFRvQ3VycmVudEZyYW1lID0gaW1tZWRpYXRlICYmIGlzUHJvY2Vzc2luZztcbiAgICAgICAgICAgIGNvbnN0IGJ1ZmZlciA9IGFkZFRvQ3VycmVudEZyYW1lID8gdG9SdW4gOiB0b1J1bk5leHRGcmFtZTtcbiAgICAgICAgICAgIGlmIChrZWVwQWxpdmUpXG4gICAgICAgICAgICAgICAgdG9LZWVwQWxpdmUuYWRkKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIGlmIChidWZmZXIuaW5kZXhPZihjYWxsYmFjaykgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgYnVmZmVyLnB1c2goY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIGlmIChhZGRUb0N1cnJlbnRGcmFtZSAmJiBpc1Byb2Nlc3NpbmcpXG4gICAgICAgICAgICAgICAgICAgIG51bVRvUnVuID0gdG9SdW4ubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrO1xuICAgICAgICB9LFxuICAgICAgICBjYW5jZWw6IChjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0b1J1bk5leHRGcmFtZS5pbmRleE9mKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpXG4gICAgICAgICAgICAgICAgdG9SdW5OZXh0RnJhbWUuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIHRvS2VlcEFsaXZlLmRlbGV0ZShjYWxsYmFjayk7XG4gICAgICAgIH0sXG4gICAgICAgIHByb2Nlc3M6IChmcmFtZURhdGEpID0+IHtcbiAgICAgICAgICAgIGlmIChpc1Byb2Nlc3NpbmcpIHtcbiAgICAgICAgICAgICAgICBmbHVzaE5leHRGcmFtZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXNQcm9jZXNzaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIFt0b1J1biwgdG9SdW5OZXh0RnJhbWVdID0gW3RvUnVuTmV4dEZyYW1lLCB0b1J1bl07XG4gICAgICAgICAgICB0b1J1bk5leHRGcmFtZS5sZW5ndGggPSAwO1xuICAgICAgICAgICAgbnVtVG9SdW4gPSB0b1J1bi5sZW5ndGg7XG4gICAgICAgICAgICBpZiAobnVtVG9SdW4pIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVRvUnVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSB0b1J1bltpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZnJhbWVEYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRvS2VlcEFsaXZlLmhhcyhjYWxsYmFjaykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXAuc2NoZWR1bGUoY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgcnVuTmV4dEZyYW1lKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpc1Byb2Nlc3NpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChmbHVzaE5leHRGcmFtZSkge1xuICAgICAgICAgICAgICAgIGZsdXNoTmV4dEZyYW1lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgc3RlcC5wcm9jZXNzKGZyYW1lRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICByZXR1cm4gc3RlcDtcbn1cblxuY29uc3QgbWF4RWxhcHNlZCA9IDQwO1xubGV0IHVzZURlZmF1bHRFbGFwc2VkID0gdHJ1ZTtcbmxldCBydW5OZXh0RnJhbWUgPSBmYWxzZTtcbmxldCBpc1Byb2Nlc3NpbmcgPSBmYWxzZTtcbmNvbnN0IGZyYW1lID0ge1xuICAgIGRlbHRhOiAwLFxuICAgIHRpbWVzdGFtcDogMCxcbn07XG5jb25zdCBzdGVwc09yZGVyID0gW1xuICAgIFwicmVhZFwiLFxuICAgIFwidXBkYXRlXCIsXG4gICAgXCJwcmVSZW5kZXJcIixcbiAgICBcInJlbmRlclwiLFxuICAgIFwicG9zdFJlbmRlclwiLFxuXTtcbmNvbnN0IHN0ZXBzID0gc3RlcHNPcmRlci5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgYWNjW2tleV0gPSBjcmVhdGVSZW5kZXJTdGVwKCgpID0+IChydW5OZXh0RnJhbWUgPSB0cnVlKSk7XG4gICAgcmV0dXJuIGFjYztcbn0sIHt9KTtcbmNvbnN0IHN5bmMgPSBzdGVwc09yZGVyLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICBjb25zdCBzdGVwID0gc3RlcHNba2V5XTtcbiAgICBhY2Nba2V5XSA9IChwcm9jZXNzLCBrZWVwQWxpdmUgPSBmYWxzZSwgaW1tZWRpYXRlID0gZmFsc2UpID0+IHtcbiAgICAgICAgaWYgKCFydW5OZXh0RnJhbWUpXG4gICAgICAgICAgICBzdGFydExvb3AoKTtcbiAgICAgICAgcmV0dXJuIHN0ZXAuc2NoZWR1bGUocHJvY2Vzcywga2VlcEFsaXZlLCBpbW1lZGlhdGUpO1xuICAgIH07XG4gICAgcmV0dXJuIGFjYztcbn0sIHt9KTtcbmNvbnN0IGNhbmNlbFN5bmMgPSBzdGVwc09yZGVyLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICBhY2Nba2V5XSA9IHN0ZXBzW2tleV0uY2FuY2VsO1xuICAgIHJldHVybiBhY2M7XG59LCB7fSk7XG5jb25zdCBmbHVzaFN5bmMgPSBzdGVwc09yZGVyLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICBhY2Nba2V5XSA9ICgpID0+IHN0ZXBzW2tleV0ucHJvY2VzcyhmcmFtZSk7XG4gICAgcmV0dXJuIGFjYztcbn0sIHt9KTtcbmNvbnN0IHByb2Nlc3NTdGVwID0gKHN0ZXBJZCkgPT4gc3RlcHNbc3RlcElkXS5wcm9jZXNzKGZyYW1lKTtcbmNvbnN0IHByb2Nlc3NGcmFtZSA9ICh0aW1lc3RhbXApID0+IHtcbiAgICBydW5OZXh0RnJhbWUgPSBmYWxzZTtcbiAgICBmcmFtZS5kZWx0YSA9IHVzZURlZmF1bHRFbGFwc2VkXG4gICAgICAgID8gZGVmYXVsdFRpbWVzdGVwXG4gICAgICAgIDogTWF0aC5tYXgoTWF0aC5taW4odGltZXN0YW1wIC0gZnJhbWUudGltZXN0YW1wLCBtYXhFbGFwc2VkKSwgMSk7XG4gICAgZnJhbWUudGltZXN0YW1wID0gdGltZXN0YW1wO1xuICAgIGlzUHJvY2Vzc2luZyA9IHRydWU7XG4gICAgc3RlcHNPcmRlci5mb3JFYWNoKHByb2Nlc3NTdGVwKTtcbiAgICBpc1Byb2Nlc3NpbmcgPSBmYWxzZTtcbiAgICBpZiAocnVuTmV4dEZyYW1lKSB7XG4gICAgICAgIHVzZURlZmF1bHRFbGFwc2VkID0gZmFsc2U7XG4gICAgICAgIG9uTmV4dEZyYW1lKHByb2Nlc3NGcmFtZSk7XG4gICAgfVxufTtcbmNvbnN0IHN0YXJ0TG9vcCA9ICgpID0+IHtcbiAgICBydW5OZXh0RnJhbWUgPSB0cnVlO1xuICAgIHVzZURlZmF1bHRFbGFwc2VkID0gdHJ1ZTtcbiAgICBpZiAoIWlzUHJvY2Vzc2luZylcbiAgICAgICAgb25OZXh0RnJhbWUocHJvY2Vzc0ZyYW1lKTtcbn07XG5jb25zdCBnZXRGcmFtZURhdGEgPSAoKSA9PiBmcmFtZTtcblxuZXhwb3J0cy5jYW5jZWxTeW5jID0gY2FuY2VsU3luYztcbmV4cG9ydHMuZGVmYXVsdCA9IHN5bmM7XG5leHBvcnRzLmZsdXNoU3luYyA9IGZsdXNoU3luYztcbmV4cG9ydHMuZ2V0RnJhbWVEYXRhID0gZ2V0RnJhbWVEYXRhO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdFRpbWVzdGVwIiwiZ2V0Q3VycmVudFRpbWUiLCJwZXJmb3JtYW5jZSIsIm5vdyIsIkRhdGUiLCJvbk5leHRGcmFtZSIsImNhbGxiYWNrIiwid2luZG93IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic2V0VGltZW91dCIsImNyZWF0ZVJlbmRlclN0ZXAiLCJydW5OZXh0RnJhbWUiLCJ0b1J1biIsInRvUnVuTmV4dEZyYW1lIiwibnVtVG9SdW4iLCJpc1Byb2Nlc3NpbmciLCJmbHVzaE5leHRGcmFtZSIsInRvS2VlcEFsaXZlIiwiV2Vha1NldCIsInN0ZXAiLCJzY2hlZHVsZSIsImtlZXBBbGl2ZSIsImltbWVkaWF0ZSIsImFkZFRvQ3VycmVudEZyYW1lIiwiYnVmZmVyIiwiYWRkIiwiaW5kZXhPZiIsInB1c2giLCJsZW5ndGgiLCJjYW5jZWwiLCJpbmRleCIsInNwbGljZSIsImRlbGV0ZSIsInByb2Nlc3MiLCJmcmFtZURhdGEiLCJpIiwiaGFzIiwibWF4RWxhcHNlZCIsInVzZURlZmF1bHRFbGFwc2VkIiwiZnJhbWUiLCJkZWx0YSIsInRpbWVzdGFtcCIsInN0ZXBzT3JkZXIiLCJzdGVwcyIsInJlZHVjZSIsImFjYyIsImtleSIsInN5bmMiLCJzdGFydExvb3AiLCJjYW5jZWxTeW5jIiwiZmx1c2hTeW5jIiwicHJvY2Vzc1N0ZXAiLCJzdGVwSWQiLCJwcm9jZXNzRnJhbWUiLCJNYXRoIiwibWF4IiwibWluIiwiZm9yRWFjaCIsImdldEZyYW1lRGF0YSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/framesync@6.0.1/node_modules/framesync/dist/framesync.cjs.js\n");

/***/ })

};
;